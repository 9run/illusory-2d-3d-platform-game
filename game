#Things will achieve:
#Make this game has gravity but the ball will not falling when it is on a
#floating platform

#set up the interface space
scene.autoscale=False #to give a more engaging 1st person perspectives
scene.userzoom=True  #so that players can see the full landscape
scene.userspin=True  #so that players can solve the 2d-3d puzzle
scene.camera.axis=vec(0,6,-42) #set up my camera to a certain distance
                              #that players would be deceived visually

#block prototype 
plane_front = box(size=vec(6,6,0.1))
plane_up = extrusion(path=[vec(0,0,0),vec(0,0.1,0)], 
               shape=shapes.rectangle(width=6, height=6, thickness=0.1),
               axis=vec(0,0,1),
               pos=vec(0,3,-3))
plane_bottom =extrusion(path=[vec(0,0,0),vec(0,0.1,0)], 
               shape=shapes.rectangle(width=6, height=6, thickness=0.1),
               axis=vec(0,0,1),
               pos=vec(0,-3,-3))
plane_left= extrusion(path=[vec(0,0,0),vec(0,0,0.1)], 
               shape=shapes.rectangle(width=6, height=6, thickness=0.1),
               axis=vec(0,0,1),
               pos=vec(-3,0,-3))
plane_right =extrusion(path=[vec(0,0,0),vec(0,0,0.1)], 
               shape=shapes.rectangle(width=6, height=6, thickness=0.1),
               axis=vec(0,0,1),
               pos=vec(3,0,-3))

blocks=compound([plane_front, plane_up, plane_bottom, plane_left, plane_right])


#the player's controlling ball
c1=ring(pos=vec(-2,5.5,-3),
        axis=vec(0,1,1),
        radius=2, thickness=0.2)
c2=ring(pos=vec(-2,5.5,-3),
        axis=vec(1,1,0),
        radius=2, thickness=0.2)
c3=ring(pos=vec(-2,5.5,-3),
        axis=vec(1,0,1),
        radius=2, thickness=0.2)
c4=ring(pos=vec(-2,5.5,-3),
        axis=vec(-1,0,1),
        radius=2, thickness=0.2)
c5=sphere(pos=vec(-2,5.5,-3),
        axis=vec(1,0,-1),
        radius=2.7,
        opacity=0.3)
controlBall=compound([c1,c2,c3,c4,c5])
controlBall.color=color.cyan
controlBall.pos=vec(-3,6,-15)

#make the view moves as the ball moves
scene.camera.follow(controlBall)


#landscape
#the beginning platform-- 4 blocks
initialN=3
block=[]
blockzero=[]

for i in range (initialN):
  blockzero[i]=blocks.clone()
  blockzero[i].pos=vec(-6*i-6,0,-17)
  blockzero[i].size=vec(8.1,8.1,8.1)
  
#1st jump& floating island
#1st layer (consist of 5 rolls)
firstrow=5
for i in range (firstrow):
  block[i]=blocks.clone()
  block[i].pos=vec(6*i+18,0,-18)
  block[i].size=vec(6.5,6.5,6.5)
  
secondrow=6
for i in range (firstrow):
  block[i]=blocks.clone()
  block[i].pos=vec(6*i+12,0,-12)
  block[i].size=vec(6.5,6.5,6.5)
  
#motion
dt=0.01
dv=0.5 #how high/far the ball would move
controlBall.vel=vec(0,0,0) #ball would be rest at the beginning
gravity=vec(0,-9.8,0)

while True:
  rate(30)
  #update position & velocity
  controlBall.pos= controlBall.pos + controlBall.vel*dt
  controlBall.vel= controlBall.vel + gravity*dt
    
  k=keysdown()
  # a list of keys that makes ball move
  if "a" in k: #left
    gravity=vec(0,-9.8,0)#give the realistic physicy playing experience
    controlBall.pos.x= controlBall.pos.x- dv
    
    
  if "d" in k: #right
    gravity=vec(0,-9.8,0)
    controlBall.pos.x= controlBall.pos.x+dv
    
  if "s" in k: #down
    gravity=vec(0,-9.8,0)
    controlBall.pos.y= controlBall.pos.y-dv
    
  if "w" in k: #up
    gravity=vec(0,-9.8,0)
    controlBall.pos.y= controlBall.pos.y+dv
  
  if "e" in k: #forward(front)
    gravity=vec(0,-9.8,0)
    controlBall.pos.z= controlBall.pos.z-dv
  
  if "z" in k: #back
    gravity=vec(0,-9.8,0)
    controlBall.pos.z= controlBall.pos.z+dv
  
  
  # make the ball not falling down when it is on platform:
    #the initial platform 
    distanceApart = blockzero[i].pos-controlBall.pos
    contactThresholdX = 0.5*blockzero[i].size.x + controlBall.radius
    contactThresholdY = 0.5*blockzero[i].size.y + controlBall.radius
    contactThresholdZ= 0.5*blockzero[i].size.z + controlBall.radius
    if (abs(distanceApart.x)< contactThresholdX):
      if (abs(distanceApart.y)< contactThresholdY):
        if (abs(distanceApart.z)< contactThresholdZ):
          controlBall.pos.y=(0.5*plane_front.size.y + c5.radius)
          gravity=vec(0,0,0)
